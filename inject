#! /usr/bin/python3

import _pickle as pkl
import os
from multiprocessing import Process
from shutil import copytree, rmtree
from time import sleep

from config import info_dict
from drawer import get_drawer
from watchgod import Change, watch


class LocalApp(object):
    def run(self):
        self._examine_watching_dir()
        self._inject_config_to_probe()
        self._inject_probe()
        while True:
            try:
                self._work()
                sleep(0.5)
            except KeyboardInterrupt:
                break
        self._clean_injection()
        self._rm_config_in_probe()
        self._clean_watching_dir()

    def _examine_watching_dir(self):
        if not os.path.isdir(info_dict["watching_path"]):
            os.mkdir(info_dict["watching_path"])

    def _inject_probe(self):
        self._clean_injection()
        copytree(info_dict["module_src_path"], info_dict["inject_module_path"])
        print("Injection done")

    def _inject_config_to_probe(self):
        with open(info_dict["probe_config_path"], "wb") as fp:
            pkl.dump(info_dict, fp)

    def _clean_injection(self):
        if os.path.isdir(info_dict["inject_module_path"]):
            rmtree(info_dict["inject_module_path"])
        print("Cleaning done")

    def _rm_config_in_probe(self):
        if os.path.isfile(info_dict["probe_config_path"]):
            os.remove(info_dict["probe_config_path"])

    def _clean_watching_dir(self):
        if os.path.isdir(info_dict["watching_path"]):
            rmtree(info_dict["watching_path"])

    def _work(self):
        for changes in watch(info_dict["watching_path"]):
            for op_type, changed_file_path in changes:
                if op_type == Change.added:
                    self._handler(changed_file_path)

    @staticmethod
    def _handler(file_path):
        print("read in file {}".format(file_path))
        try:
            with open(file_path, "rb") as fp:
                content = pkl.load(fp)
            func_type, arguments = content
            wp = Process(target=get_drawer(func_type), args=(arguments,))
            wp.start()
            wp.join()
        except Exception as e:
            print("The file cannot be read properly, {}".format(str(e)))


if __name__ == "__main__":
    app = LocalApp()
    app.run()
